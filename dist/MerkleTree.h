/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/everest/kremlin/krml -library EverCrypt,EverCrypt.* /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Pervasives_Native.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Pervasives.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Range.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Common.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_VConfig.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Types.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Types.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Result.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Squash.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Classical.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Preorder.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Calc.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Monotonic_Pure.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Effect.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Data.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Builtins.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_FunctionalExtensionality.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Set.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Map.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Mul.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Set.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Meta.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_Two_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_StrongExcludedMiddle.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Classical_Sugar.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_List_Tot_Base.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_List_Tot_Properties.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_List_Tot.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Seq_Base.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Seq_Properties.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Seq.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Seqs_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Math_Lib.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Math_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_BitVector.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt32.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt8.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_Four_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_Seq_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Opaque_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Types_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_Two.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Exn.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Monotonic_Witnessed.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Ghost.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_ErasedLogic.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_PropositionalExtensionality.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_PredicateExtensionality.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_TSet.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Monotonic_Heap.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Heap.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_ST.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_All.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_List.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Seqs.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_TypesNative_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_TypesNative.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Words_Seq.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_Types.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_Prop_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_MachineHeap_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_MachineHeap.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Option.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Monotonic_HyperHeap.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Monotonic_HyperStack.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_HyperStack.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_HyperStack_ST.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Universe.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_GSet.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_ModifiesGen.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Order.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Const.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Builtins.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Derived.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Compare.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Derived_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Print.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_SyntaxHelpers.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Util.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_IndefiniteDescription.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Formula.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Derived.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Logic.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_BigOps.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Monotonic_Buffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Buffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Modifies.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_BufferView_Down.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt64.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt16.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_BufferView_Up.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_Views.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_ImmutableBuffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_HeapTypes_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_Types.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_Heap_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_ModifiesPat.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_BufferView.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_BufferViewHelpers.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Machine_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Map16.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_HeapImpl.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_Heap.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Instruction_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Bytes_Code_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_AES_AES_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Math_Poly2_Defs_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Math_Poly2_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Math_Poly2_Bits_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_LoopCombinators.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int64.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int32.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int16.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int8.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int_Cast.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_BV.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Reflection_Arith.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_BV.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_UInt128.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int_Cast_Full.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Int128.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_IntTypes.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_Sequence.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA3_Constants.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_RawIntTypes.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_ByteSequence.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA3.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_UpdateMulti.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Blake2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Definitions.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Lemmas0.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_PadFinish.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Loops.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA2_Constants.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_CryptoInstructions_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_CPU_Features_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Instructions_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Machine_Semantics_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_Base.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Memory.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Stack_i.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_BufferOps.krml /Users/jonathan/Code/everest/merkle-tree/obj/C_Loops.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_Loops.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Endianness.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Endianness.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_Memzero0.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_ConstBuffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_Buffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_ByteBuffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_HyperStack_All.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Impl_SHA3.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_SHA3.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_IntVector_Intrinsics.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_GaloisField.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_AES.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_IntVector.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Impl_Blake2_Core.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Impl_Blake2_Constants.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Impl_Blake2_Generic.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Blake2b_256.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Blake2s_128.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA1.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_MD5.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Agile_Hash.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Incremental_Definitions.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_MD_Incremental.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_Sequence_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_UpdateMulti_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA3_Incremental.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Blake2_Incremental.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Incremental.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Definitions.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_PadFinish.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_MD.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_SHA2_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Float.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_IO.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_BufferViewStore.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Memory_Sems.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Def_PossiblyMonad.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Flags.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Stack_Sems.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Regs.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_State.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_StateLemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_HeapLemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Print_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Decls.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_MemoryAdapters.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_Assumptions.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Interop_X64.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_AsLowStar_ValeSig.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_AsLowStar_LowStarSig.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_AsLowStar_MemoryHelpers.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_QuickCode.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_QuickCodes.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Taint_Semantics.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsLemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsBasic.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsMem.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsVector.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsStack.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_Stack.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_SHA_SHA_helpers.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_X64_InsSha.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_SHA_X64.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_AsLowStar_Wrapper.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Stdcalls_X64_Sha.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Bv_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Math_Bits.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Tactics.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Poly1305_Bitvectors.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Algebra_CommMonoid.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_CanonCommSemiring.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Math_Lemmas_Int.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Tactics_Canon.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Poly1305_Spec_s.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Poly1305_Math.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Poly1305_Util.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Poly1305_X64.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Stdcalls_X64_Poly.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Wrapper_X64_Poly.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Arch_BufferFriend.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_SHA_Simplify_Sha.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Wrapper_X64_Sha.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Blake2b_32.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Blake2s_32.krml /Users/jonathan/Code/everest/merkle-tree/obj/Spec_Hash_Incremental_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Blake2_Lemmas.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Core_Blake2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Blake2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_SHA3.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Core_SHA2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_SHA2.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Core_SHA1.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_SHA1.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Core_MD5.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_MD5.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Blake2b_256.krml /Users/jonathan/Code/everest/merkle-tree/obj/Hacl_Hash_Blake2s_128.krml /Users/jonathan/Code/everest/merkle-tree/obj/EverCrypt_TargetConfig.krml /Users/jonathan/Code/everest/merkle-tree/obj/C.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Char.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_String.krml /Users/jonathan/Code/everest/merkle-tree/obj/C_String.krml /Users/jonathan/Code/everest/merkle-tree/obj/C_Failure.krml /Users/jonathan/Code/everest/merkle-tree/obj/FStar_Integers.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_Basic.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_X64_Cpuid.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Lib_X64_Cpuidstdcall.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Stdcalls_X64_Cpuid.krml /Users/jonathan/Code/everest/merkle-tree/obj/Vale_Wrapper_X64_Cpuid.krml /Users/jonathan/Code/everest/merkle-tree/obj/EverCrypt_AutoConfig2.krml /Users/jonathan/Code/everest/merkle-tree/obj/EverCrypt_Helpers.krml /Users/jonathan/Code/everest/merkle-tree/obj/EverCrypt_Hash.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Vector.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Regional.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_RVector.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Spec.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct_Base.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct_Rhs.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct_Path.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct_Flushing.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct_Insertion.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_New_High_Correct.krml /Users/jonathan/Code/everest/merkle-tree/obj/LowStar_Regional_Instances.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Low_Datastructures.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Low_Hashfunctions.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Low_VectorExtras.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Low.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_EverCrypt.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Init.krml /Users/jonathan/Code/everest/merkle-tree/obj/Lib_RawBuffer.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree_Low_Serialization.krml /Users/jonathan/Code/everest/merkle-tree/obj/MerkleTree.krml -tmpdir dist -skip-compilation -minimal -add-include "krml/internal/target.h" -add-include "krml/internal/types.h" -add-include "krml/lowstar_endianness.h" -add-include <stdint.h> -add-include <stdbool.h> -add-include <string.h> -fparentheses -o libmerkletree.a -library Vale.Stdcalls.* -no-prefix Vale.Stdcalls.* -static-header Vale.Inline.* -library Vale.Inline.X64.Fadd_inline -library Vale.Inline.X64.Fmul_inline -library Vale.Inline.X64.Fswap_inline -library Vale.Inline.X64.Fsqr_inline -no-prefix Vale.Inline.X64.Fadd_inline -no-prefix Vale.Inline.X64.Fmul_inline -no-prefix Vale.Inline.X64.Fswap_inline -no-prefix Vale.Inline.X64.Fsqr_inline -no-prefix MerkleTree -no-prefix MerkleTree.EverCrypt -bundle MerkleTree+MerkleTree.Init+MerkleTree.EverCrypt+MerkleTree.Low+MerkleTree.Low.Serialization+MerkleTree.Low.Hashfunctions=MerkleTree.*[rename=MerkleTree] -bundle LowStar.* -bundle Prims,C.Failure,C,C.String,C.Loops,Spec.Loops,C.Endianness,FStar.*[rename=Merkle_Krmllib] -bundle Meta.*,Hacl.*,Vale.*,Spec.*,Lib.*,EverCrypt,EverCrypt.*[rename=Merkle_EverCrypt]
  F* version: 13dbe486
  KaRaMeL version: 6f3f060e
 */

#ifndef __MerkleTree_H
#define __MerkleTree_H




#include "krml/internal/target.h"
#include "krml/internal/types.h"
#include "krml/lowstar_endianness.h"
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
typedef struct MerkleTree_Low_Datastructures_hash_vec_s
{
  uint32_t sz;
  uint32_t cap;
  uint8_t **vs;
}
MerkleTree_Low_Datastructures_hash_vec;

typedef struct MerkleTree_Low_Datastructures_hash_vv_s
{
  uint32_t sz;
  uint32_t cap;
  MerkleTree_Low_Datastructures_hash_vec *vs;
}
MerkleTree_Low_Datastructures_hash_vv;

typedef uint32_t hash_size_t;

typedef uint64_t offset_t;

typedef uint32_t index_t;

typedef uint8_t *hash;

typedef struct MerkleTree_Low_path_s
{
  uint32_t hash_size;
  MerkleTree_Low_Datastructures_hash_vec hashes;
}
MerkleTree_Low_path;

typedef MerkleTree_Low_path path;

typedef MerkleTree_Low_path *path_p;

typedef const MerkleTree_Low_path *const_path_p;

typedef struct MerkleTree_Low_merkle_tree_s
{
  uint32_t hash_size;
  uint64_t offset;
  uint32_t i;
  uint32_t j;
  MerkleTree_Low_Datastructures_hash_vv hs;
  bool rhs_ok;
  MerkleTree_Low_Datastructures_hash_vec rhs;
  uint8_t *mroot;
  void (*hash_fun)(uint8_t *x0, uint8_t *x1, uint8_t *x2);
}
MerkleTree_Low_merkle_tree;

typedef MerkleTree_Low_merkle_tree merkle_tree;

typedef MerkleTree_Low_merkle_tree *mt_p;

typedef const MerkleTree_Low_merkle_tree *const_mt_p;

/**
  Constructor for hashes
*/
uint8_t *mt_init_hash(uint32_t hash_size);

/**
  Destructor for hashes
*/
void mt_free_hash(uint8_t *h);

/**
  Constructor for paths
*/
MerkleTree_Low_path *mt_init_path(uint32_t hash_size);

/**
  Destructor for paths
*/
void mt_free_path(MerkleTree_Low_path *path1);

/**
  Length of a path

  @param[in] p Path

  return The length of the path
*/
uint32_t mt_get_path_length(const MerkleTree_Low_path *path1);

/**
  Insert hash into path

  @param[in] p Path
  @param[in] hash Hash to insert
*/
void mt_path_insert(MerkleTree_Low_path *path1, uint8_t *hash1);

/**
  Get step on a path

  @param[in] p Path
  @param[in] i Path step index

  return The hash at step i of p
*/
uint8_t *mt_get_path_step(const MerkleTree_Low_path *path1, uint32_t i);

/**
  Precondition predicate for mt_get_path_step
*/
bool mt_get_path_step_pre(const MerkleTree_Low_path *path1, uint32_t i);

/**
  Construction with custom hash functions

  @param[in]  hash_size Hash size (in bytes)
  @param[in]  i         The initial hash

  return The new Merkle tree
*/
MerkleTree_Low_merkle_tree
*mt_create_custom(
  uint32_t hash_size,
  uint8_t *i,
  void (*hash_fun)(uint8_t *x0, uint8_t *x1, uint8_t *x2)
);

/**
  Destruction

  @param[in]  mt  The Merkle tree
*/
void mt_free(MerkleTree_Low_merkle_tree *mt);

/**
  Insertion

  @param[in]  mt  The Merkle tree
  @param[in]  v   The tree does not take ownership of the hash, it makes a copy of its content.

 Note: The content of the hash will be overwritten with an arbitrary value.
*/
void mt_insert(MerkleTree_Low_merkle_tree *mt, uint8_t *v);

/**
  Precondition predicate for mt_insert
*/
bool mt_insert_pre(const MerkleTree_Low_merkle_tree *mt, uint8_t *v);

/**
  Getting the Merkle root

  @param[in]  mt   The Merkle tree
  @param[out] root The Merkle root
*/
void mt_get_root(const MerkleTree_Low_merkle_tree *mt, uint8_t *root);

/**
  Precondition predicate for mt_get_root
*/
bool mt_get_root_pre(const MerkleTree_Low_merkle_tree *mt, uint8_t *root);

/**
  Getting a Merkle path

  @param[in]  mt   The Merkle tree
  @param[in]  idx  The index of the target hash
  @param[out] path A resulting Merkle path that contains the leaf hash.
  @param[out] root The Merkle root

  return The number of elements in the tree

  Notes:
  - The resulting path contains pointers to hashes in the tree, not copies of
    the hash values.
  - idx must be within the currently held indices in the tree (past the
    last flush index).
*/
uint32_t
mt_get_path(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t idx,
  MerkleTree_Low_path *path1,
  uint8_t *root
);

/**
  Precondition predicate for mt_get_path
*/
bool
mt_get_path_pre(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t idx,
  const MerkleTree_Low_path *path1,
  uint8_t *root
);

/**
  Flush the Merkle tree

  @param[in]  mt   The Merkle tree
*/
void mt_flush(MerkleTree_Low_merkle_tree *mt);

/**
  Precondition predicate for mt_flush
*/
bool mt_flush_pre(const MerkleTree_Low_merkle_tree *mt);

/**
  Flush the Merkle tree up to a given index

  @param[in]  mt   The Merkle tree
  @param[in]  idx  The index up to which to flush the tree
*/
void mt_flush_to(MerkleTree_Low_merkle_tree *mt, uint64_t idx);

/**
  Precondition predicate for mt_flush_to
*/
bool mt_flush_to_pre(const MerkleTree_Low_merkle_tree *mt, uint64_t idx);

/**
  Retract the Merkle tree down to a given index

  @param[in]  mt   The Merkle tree
  @param[in]  idx  The index to retract the tree to

 Note: The element and idx will remain in the tree.
*/
void mt_retract_to(MerkleTree_Low_merkle_tree *mt, uint64_t idx);

/**
  Precondition predicate for mt_retract_to
*/
bool mt_retract_to_pre(const MerkleTree_Low_merkle_tree *mt, uint64_t idx);

/**
  Client-side verification

  @param[in]  mt   The Merkle tree
  @param[in]  tgt  The index of the target hash
  @param[in]  max  The maximum index + 1 of the tree when the path was generated
  @param[in]  path The Merkle path to verify
  @param[in]  root

  return true if the verification succeeded, false otherwise

  Note: max - tgt must be less than 2^32.
*/
bool
mt_verify(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t tgt,
  uint64_t max,
  const MerkleTree_Low_path *path1,
  uint8_t *root
);

/**
  Precondition predicate for mt_verify
*/
bool
mt_verify_pre(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t tgt,
  uint64_t max,
  const MerkleTree_Low_path *path1,
  uint8_t *root
);

/**
  Serialization size

  @param[in]  mt   The Merkle tree

  return the number of bytes required to serialize the tree
*/
uint64_t mt_serialize_size(const MerkleTree_Low_merkle_tree *mt);

/**
  Merkle tree serialization

  @param[in]  mt   The Merkle tree
  @param[out] buf  The buffer to serialize the tree into
  @param[in]  len  Length of buf

  return the number of bytes written

  Note: buf must be a buffer of size mt_serialize_size(mt) or larger, but
  smaller than 2^32 (larger buffers are currently not supported).
*/
uint64_t mt_serialize(const MerkleTree_Low_merkle_tree *mt, uint8_t *buf, uint64_t len);

/**
  Merkle tree deserialization

  @param[in]  expected_hash_size Expected hash size to match hash_fun
  @param[in]  buf  The buffer to deserialize the tree from
  @param[in]  len  Length of buf
  @param[in]  hash_fun Hash function

  return pointer to the new tree if successful, NULL otherwise

  Note: buf must point to an allocated buffer.
*/
MerkleTree_Low_merkle_tree
*mt_deserialize(
  const uint8_t *buf,
  uint64_t len,
  void (*hash_fun)(uint8_t *x0, uint8_t *x1, uint8_t *x2)
);

/**
  Path serialization

  @param[in]  path The path
  @param[out] buf  The buffer to serialize the path into
  @param[in]  len  Length of buf

  return the number of bytes written
*/
uint64_t mt_serialize_path(const MerkleTree_Low_path *path1, uint8_t *buf, uint64_t len);

/**
  Path deserialization

  @param[in]  buf  The buffer to deserialize the path from
  @param[in]  len  Length of buf

  return pointer to the new path if successful, NULL otherwise

 Note: buf must point to an allocated buffer.
*/
MerkleTree_Low_path *mt_deserialize_path(const uint8_t *buf, uint64_t len);

extern void (*MerkleTree_Init_init)();

/**
  Default hash function
*/
void mt_sha256_compress(uint8_t *src1, uint8_t *src2, uint8_t *dst);

/**
  Construction wired to sha256 from EverCrypt

  @param[in]  init   The initial hash
*/
MerkleTree_Low_merkle_tree *mt_create(uint8_t *init);

typedef uint32_t MerkleTree_Low_index_t;

extern uint32_t MerkleTree_Low_uint32_32_max;

extern uint64_t MerkleTree_Low_uint32_max;

extern uint64_t MerkleTree_Low_uint64_max;

extern uint64_t MerkleTree_Low_offset_range_limit;

typedef uint64_t MerkleTree_Low_offset_t;

extern uint32_t MerkleTree_Low_merkle_tree_size_lg;

bool MerkleTree_Low_uu___is_MT(MerkleTree_Low_merkle_tree projectee);

typedef MerkleTree_Low_merkle_tree *MerkleTree_Low_mt_p;

typedef const MerkleTree_Low_merkle_tree *MerkleTree_Low_const_mt_p;

bool
MerkleTree_Low_merkle_tree_conditions(
  uint64_t offset,
  uint32_t i,
  uint32_t j,
  MerkleTree_Low_Datastructures_hash_vv hs,
  bool rhs_ok,
  MerkleTree_Low_Datastructures_hash_vec rhs,
  uint8_t *mroot
);

uint32_t MerkleTree_Low_offset_of(uint32_t i);

void MerkleTree_Low_mt_free(MerkleTree_Low_merkle_tree *mt);

bool MerkleTree_Low_mt_insert_pre(const MerkleTree_Low_merkle_tree *mt, uint8_t *v);

void MerkleTree_Low_mt_insert(MerkleTree_Low_merkle_tree *mt, uint8_t *v);

MerkleTree_Low_merkle_tree
*MerkleTree_Low_mt_create_custom(
  uint32_t hsz,
  uint8_t *init,
  void (*hash_fun)(uint8_t *x0, uint8_t *x1, uint8_t *x2)
);

bool MerkleTree_Low_uu___is_Path(MerkleTree_Low_path projectee);

typedef MerkleTree_Low_path *MerkleTree_Low_path_p;

typedef const MerkleTree_Low_path *MerkleTree_Low_const_path_p;

MerkleTree_Low_path *MerkleTree_Low_init_path(uint32_t hsz);

void MerkleTree_Low_clear_path(MerkleTree_Low_path *p);

void MerkleTree_Low_free_path(MerkleTree_Low_path *p);

bool MerkleTree_Low_mt_get_root_pre(const MerkleTree_Low_merkle_tree *mt, uint8_t *rt);

void MerkleTree_Low_mt_get_root(const MerkleTree_Low_merkle_tree *mt, uint8_t *rt);

void MerkleTree_Low_mt_path_insert(uint32_t hsz, MerkleTree_Low_path *p, uint8_t *hp);

uint32_t MerkleTree_Low_mt_get_path_length(const MerkleTree_Low_path *p);

bool MerkleTree_Low_mt_get_path_step_pre(const MerkleTree_Low_path *p, uint32_t i);

uint8_t *MerkleTree_Low_mt_get_path_step(const MerkleTree_Low_path *p, uint32_t i);

bool
MerkleTree_Low_mt_get_path_pre(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t idx,
  const MerkleTree_Low_path *p,
  uint8_t *root
);

uint32_t
MerkleTree_Low_mt_get_path(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t idx,
  MerkleTree_Low_path *p,
  uint8_t *root
);

bool MerkleTree_Low_mt_flush_to_pre(const MerkleTree_Low_merkle_tree *mt, uint64_t idx);

void MerkleTree_Low_mt_flush_to(MerkleTree_Low_merkle_tree *mt, uint64_t idx);

bool MerkleTree_Low_mt_flush_pre(const MerkleTree_Low_merkle_tree *mt);

void MerkleTree_Low_mt_flush(MerkleTree_Low_merkle_tree *mt);

bool MerkleTree_Low_mt_retract_to_pre(const MerkleTree_Low_merkle_tree *mt, uint64_t r);

void MerkleTree_Low_mt_retract_to(MerkleTree_Low_merkle_tree *mt, uint64_t r);

bool
MerkleTree_Low_mt_verify_pre(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t k,
  uint64_t j,
  const MerkleTree_Low_path *p,
  uint8_t *rt
);

bool
MerkleTree_Low_mt_verify(
  const MerkleTree_Low_merkle_tree *mt,
  uint64_t k,
  uint64_t j,
  const MerkleTree_Low_path *p,
  uint8_t *rt
);

typedef uint8_t MerkleTree_Low_Serialization_uint8_t;

typedef uint16_t MerkleTree_Low_Serialization_uint16_t;

typedef uint32_t MerkleTree_Low_Serialization_uint32_t;

typedef uint64_t MerkleTree_Low_Serialization_uint64_t;

typedef uint8_t *MerkleTree_Low_Serialization_uint8_p;

typedef const uint8_t *MerkleTree_Low_Serialization_const_uint8_p;

uint64_t MerkleTree_Low_Serialization_mt_serialize_size(const MerkleTree_Low_merkle_tree *mt);

uint64_t
MerkleTree_Low_Serialization_mt_serialize(
  const MerkleTree_Low_merkle_tree *mt,
  uint8_t *output,
  uint64_t sz
);

MerkleTree_Low_merkle_tree
*MerkleTree_Low_Serialization_mt_deserialize(
  const uint8_t *input,
  uint64_t sz,
  void (*hash_fun)(uint8_t *x0, uint8_t *x1, uint8_t *x2)
);

uint64_t
MerkleTree_Low_Serialization_mt_serialize_path(
  const MerkleTree_Low_path *p,
  uint8_t *output,
  uint64_t sz
);

MerkleTree_Low_path
*MerkleTree_Low_Serialization_mt_deserialize_path(const uint8_t *input, uint64_t sz);

uint8_t *MerkleTree_Low_Hashfunctions_init_hash(uint32_t hsz);

void MerkleTree_Low_Hashfunctions_free_hash(uint8_t *h);

typedef void (*MerkleTree_Low_Hashfunctions_hash_fun_t)(uint8_t *x0, uint8_t *x1, uint8_t *x2);


#define __MerkleTree_H_DEFINED
#endif
